{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["SectionContainer","Section","title","children","Button","typeFeedback","BtnContainer","ItemBtnList","FeedbackOptions","options","leaveFeedback","Object","keys","map","option","onClick","nanoid","Notification","message","StatItem","StatContainer","Statistics","good","neutral","bad","total","positivePercentage","App","state","incrementFeedback","feedback","setState","prevState","this","values","reduce","sum","current","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAEO,IAAMA,EAAgB,mF,OCGd,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAACH,EAAD,WACE,6BAAKE,IACJC,K,YCPP,IAaaC,EAAM,yMAbC,SAAC,GACnB,OADwC,EAAnBC,cAEnB,IAAK,OACH,MAAO,QACT,IAAK,UACH,MAAO,OACT,IAAK,MACH,MAAO,SACT,QACE,MAAO,UAIM,KAYNC,EAAY,gIAOZC,EAAW,+EC7BT,SAASC,EAAT,GAAsD,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,cACjD,OACE,cAACJ,EAAD,UACGK,OAAOC,KAAKH,GAASI,KAAI,SAACC,GACzB,OACE,cAACP,EAAD,UACE,cAACH,EAAD,CAEEC,aAAcS,EACdC,QAAS,kBAAML,EAAcI,IAH/B,SAKGA,GAJIA,IAFSE,oBCRb,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICDN,IAAMC,EAAQ,8EAGRC,EAAa,yGCAX,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,mCACGD,EACC,eAACL,EAAD,WACE,eAACD,EAAD,oBAAiBG,KACjB,eAACH,EAAD,uBAAoBI,KACpB,eAACJ,EAAD,mBAAgBK,KAChB,eAACL,EAAD,qBAAkBM,KAClB,eAACN,EAAD,iCAA8BO,EAA9B,UAGF,cAACT,EAAD,CAAcC,QAAQ,wB,ICfTS,E,4MACnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,kBAAoB,SAACC,GACnB,EAAKC,UAAS,SAACC,GAAD,sBAAmBF,EAAWE,EAAUF,GAAY,O,4CAGpE,WACE,MAA+BG,KAAKL,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEjBC,EADad,OAAOuB,OAAOD,KAAKL,OACbO,QAAO,SAAUC,EAAKC,GAC7C,OAAOD,EAAMC,IACZ,GAEGX,EAAqBY,KAAKC,MAAOjB,EAAOG,EAAS,KAEvD,OACE,gCACE,cAACxB,EAAD,CAASC,MAAM,yBAAf,SACE,cAACM,EAAD,CACEC,QAASwB,KAAKL,MACdlB,cAAeuB,KAAKJ,sBAGxB,cAAC5B,EAAD,CAASC,MAAM,aAAf,SACE,cAACmB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAlCCc,aCHjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.73c4c6b6.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro'\r\n\r\nexport const SectionContainer = styled.div`\r\n  text-align: center;\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { SectionContainer } from './Section.styled'\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <SectionContainer>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </SectionContainer>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import styled from '@emotion/styled/macro'\r\n\r\nconst getBtnColor = ({ typeFeedback }) => {\r\n  switch (typeFeedback) {\r\n    case 'good':\r\n      return 'green'\r\n    case 'neutral':\r\n      return 'blue'\r\n    case 'bad':\r\n      return 'tomato'\r\n    default:\r\n      return 'grey'\r\n  }\r\n}\r\n\r\nexport const Button = styled.button`\r\n  display: block;\r\n  width: max-content;\r\n  border: 2px solid grey;\r\n  padding: 5px;\r\n  margin: 10px;\r\n  border-radius: 5px;\r\n  text-transform: capitalize;\r\n  cursor: pointer;\r\n\r\n  background-color: ${getBtnColor};\r\n`\r\nexport const BtnContainer = styled.ul`\r\n  display: flex;\r\n  padding: 0;\r\n  justify-content: center;\r\n  list-style: none;\r\n`\r\n\r\nexport const ItemBtnList = styled.li`\r\n  display: block;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport { Button, BtnContainer, ItemBtnList } from './FeedbackOptions.styled'\r\n\r\nexport default function FeedbackOptions({ options, leaveFeedback }) {\r\n  return (\r\n    <BtnContainer>\r\n      {Object.keys(options).map((option) => {\r\n        return (\r\n          <ItemBtnList key={nanoid()}>\r\n            <Button\r\n              key={option}\r\n              typeFeedback={option}\r\n              onClick={() => leaveFeedback(option)}\r\n            >\r\n              {option}\r\n            </Button>\r\n          </ItemBtnList>\r\n        )\r\n      })}\r\n    </BtnContainer>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  leaveFeedback: PropTypes.func.isRequired,\r\n}\r\n","import PropTypes from 'prop-types'\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n","import styled from '@emotion/styled/macro'\r\n\r\nexport const StatItem = styled.li`\r\n  display: block;\r\n`\r\nexport const StatContainer = styled.ul`\r\n  display: block;\r\n  padding: 0;\r\n  list-style: none;\r\n`\r\n","import Notification from '../Notification/Notification'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { StatItem, StatContainer } from './Statistics.styled'\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      {total ? (\r\n        <StatContainer>\r\n          <StatItem>Good: {good}</StatItem>\r\n          <StatItem>Neutral: {neutral}</StatItem>\r\n          <StatItem>Bad: {bad}</StatItem>\r\n          <StatItem>Total: {total}</StatItem>\r\n          <StatItem>Positive feedback: {positivePercentage}%</StatItem>\r\n        </StatContainer>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n","import React, { Component } from 'react'\n\nimport './App.css'\n\nimport Section from './components/Section/Section.jsx'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.jsx'\nimport Statistics from './components/Statistics/Statistics.jsx'\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  incrementFeedback = (feedback) => {\n    this.setState((prevState) => ({ [feedback]: prevState[feedback] + 1 }))\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state\n    const totalArray = Object.values(this.state)\n    const total = totalArray.reduce(function (sum, current) {\n      return sum + current\n    }, 0)\n\n    const positivePercentage = Math.round((good / total) * 100)\n\n    return (\n      <div>\n        <Section title=\"Please, leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            leaveFeedback={this.incrementFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}